{"version":3,"sources":["Components/Header/Header.js","Components/ProjectCard/ProjectCard.js","Components/ProjectList/ProjectList.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","ProjectCard","_ref","name","description","link","key","githubPage","isDone","onClick","console","log","href","ProjectList","projects","map","project","Components_ProjectCard_ProjectCard","App","Components_Header_Header","Components_ProjectList_ProjectList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oTAYeA,SATD,WACZ,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBAAd,qBACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBAAd,eCaSC,SAjBI,SAAAC,GAAyD,IAAtDC,EAAsDD,EAAtDC,KAAMC,EAAgDF,EAAhDE,YAAkBC,GAA8BH,EAAnCI,IAAmCJ,EAA9BG,MAAME,EAAwBL,EAAxBK,WAAwBL,EAAZM,OAC9D,OACEX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOS,QAASC,QAAQC,IAAI,OACzCd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,UAAKI,GACLN,EAAAC,EAAAC,cAAA,YAEFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,YACAF,EAAAC,EAAAC,cAAA,SAAIK,GACO,OAATC,EAAiB,GAAKR,EAAAC,EAAAC,cAAA,KAAGa,KAAMP,GAAT,gBACxBR,EAAAC,EAAAC,cAAA,KAAGa,KAAML,GAAT,kBCYOM,SAtBI,SAAAX,GAAiB,IAAdY,EAAcZ,EAAdY,SACpB,OACEjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAEbc,EAASC,IAAI,SAACC,GAAY,IAChBb,EAAqDa,EAArDb,KAAMC,EAA+CY,EAA/CZ,YAAaE,EAAkCU,EAAlCV,IAAKD,EAA6BW,EAA7BX,KAAME,EAAuBS,EAAvBT,WAAYC,EAAWQ,EAAXR,OAClD,OACEX,EAAAC,EAAAC,cAACkB,EAAD,CACEd,KAAQA,EACRC,YAAeA,EACfE,IAAOA,EACPD,KAAQA,EACRE,WAAcA,EACdC,OAAUA,SCZhBM,SAAW,CACf,CACEX,KAAM,eACNC,YAAa,gEACbE,IAAK,EACLD,KAAM,KACNE,WAAY,4CACZC,QAAQ,GAEV,CACEL,KAAM,2BACNC,YAAa,uDACbE,IAAK,EACLD,KAAM,KACNE,WAAY,0CACZC,QAAQ,GAEV,CACEL,KAAM,eACNC,YAAa,gDACbE,IAAK,EACLD,KAAM,KACNE,WAAY,2CACZC,QAAQ,GAEV,CACEL,KAAM,uBACNC,YAAa,4DACbE,IAAK,EACLD,KAAM,KACNE,WAAY,+CACZC,QAAQ,KAeGU,mLATX,OACErB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAACoB,EAAD,MACAtB,EAAAC,EAAAC,cAACqB,EAAD,CAAaN,SAAUA,YALbO,aC5BEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e1558ebf.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Header.css';\r\n\r\nconst Header =()=> {\r\n  return (\r\n    <div className='Header'>\r\n      <h1 className='Header_headers'>Alejandro Jimenez</h1>\r\n      <h3 className='Header_headers'>Projects</h3>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport './ProjectCard.css'\r\n\r\nconst ProjectCard =({ name, description, key, link, githubPage, isDone })=> {\r\n  return (\r\n    <div className=\"Card\" onClick={console.log('yo')}>  \r\n      <div className='Card_top'>\r\n        <h2>{name}</h2>\r\n        <hr />  \r\n      </div>\r\n      <div className='Card_bottom'>    \r\n        <img />  \r\n        <p>{description}</p>\r\n        {(link === null) ? '' : <a href={link}>Website Link</a> }\r\n        <a href={githubPage}>githubPage</a>\r\n      </div>        \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProjectCard;","import React from 'react';\r\nimport ProjectCard from '../ProjectCard/ProjectCard.js';\r\nimport './ProjectList.css'\r\n\r\nconst ProjectList =({ projects })=> {\r\n  return (\r\n    <div className=\"gridContainer\">\r\n    {\r\n      projects.map((project) => {\r\n        const { name, description, key, link, githubPage, isDone } = project;\r\n        return (\r\n          <ProjectCard \r\n            name = {name}\r\n            description = {description}\r\n            key = {key}\r\n            link = {link}\r\n            githubPage = {githubPage}\r\n            isDone = {isDone}\r\n          />\r\n        );\r\n      })\r\n    }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProjectList;","import React, { Component } from 'react';\nimport Header from './Components/Header/Header.js';\nimport ProjectList from './Components/ProjectList/ProjectList.js';\nimport './App.css';\n\nconst projects = [\n  {\n    name: 'Project-Blue',\n    description: 'Social Media/Advertising Webapp that shows you what you love!',\n    key: 1,\n    link: null,\n    githubPage: 'https://github.com/kholland4/project-blue',\n    isDone: false,\n  },  \n  {\n    name: 'Savings Calculator React',\n    description: 'A savings calculator made with React.js, and Node.js',\n    key: 2,\n    link: null,\n    githubPage: 'https://github.com/algonzale/scalcreact',\n    isDone: false,\n  },\n  {\n    name: 'Robo Friends',\n    description: 'A robot friend finding app made with React.js',\n    key: 3,\n    link: null,\n    githubPage: 'https://github.com/algonzale/robofriends',\n    isDone: true,\n  },\n  {\n    name: 'Face Recognition App',\n    description: 'A face recognition app made with React.js, and Express.js',\n    key: 4,\n    link: null,\n    githubPage: 'https://github.com/algonzale/facerecognition',\n    isDone: false\n  },\n]\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"main\">\n        <Header />\n        <ProjectList projects={projects}/>  \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}